name: Check Releases

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:

jobs:
  check-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch remote tags
        run: git fetch --tags https://github.com/hickford/git-credential-oauth

      - name: Get the highest version
        id: get-highest-version
        #run: echo "::set-output name=version::$(git tag -l | sort -V | tail -n 1)"
        run: |        
          #highest_version=$(git tag -l | grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
          #echo "::set-output name=version::${highest_version}"
          #highest_version=$(git tag -l | grep -Eo '^v?[0-9]+\.[0-9]+\.[0-9]+' | sed 's/^v//;s/v$//' | sort -V | tail -n 1)
          #echo "HIGHEST_VERSION=${highest_version}" >> $GITHUB_ENV          
          #latest_tag=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | head -n 1)
          #echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV
          latest_tag=$(git for-each-ref --sort=taggerdate --format '%(refname:short)' refs/tags | tail -n 1)
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV          
          
      - name: Check release for the latest tag
        run: |
          latest_tag=${{ env.LATEST_TAG }}
          release=$(curl -s "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$latest_tag")
          if [[ $release == *"message"*"Not Found"* ]]; then
            echo "Release does not exist for the latest tag $latest_tag."
            # You can perform additional actions here, e.g., create a release.
          else
            echo "Release already exists for the latest tag $latest_tag."
          fi
        env:
          LATEST_TAG: ${{ env.LATEST_TAG }}
          GITHUB_REPOSITORY: ${{ github.repository }}
