name: Check Releases

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:

jobs:
  check-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: 'hickford/git-credential-oauth'

      - name: Fetch remote tags
        run: git fetch --tags https://github.com/hickford/git-credential-oauth

      - name: Get the highest version
        id: get-highest-version
        #run: echo "::set-output name=version::$(git tag -l | sort -V | tail -n 1)"
        run: |        
          latest_tag=$(git for-each-ref --sort=creatordate --format '%(refname:short)' refs/tags | tail -n 1)
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV          
          
      - name: Check release for the latest tag
        run: |
          latest_tag=${{ env.LATEST_TAG }}
          release=$(curl -s "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$latest_tag")
          if [[ $release == *"message"*"Not Found"* ]]; then
            echo "Release does not exist for the latest tag $latest_tag."
            # You can perform additional actions here, e.g., create a release.

            #git clone -b "$latest_tag" https://github.com/hickford/git-credential-oauth
            #git tag "$latest_tag"
            echo "BUILD_TAG=true" >> $GITHUB_ENV
            
            #git-credential-oauth
            #ls -la
            
          else
            echo "Release already exists for the latest tag $latest_tag."
          fi
        env:
          LATEST_TAG: ${{ env.LATEST_TAG }}
          GITHUB_REPOSITORY: ${{ github.repository }}
   
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.x
        if: env.BUILD_TAG == 'true'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          #args: -f .goreleaser.yaml release --snapshot --clean
          args: -f .goreleaser.yaml release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.BUILD_TAG == 'true'          

